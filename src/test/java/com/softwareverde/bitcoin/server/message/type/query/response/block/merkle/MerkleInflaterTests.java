package com.softwareverde.bitcoin.server.message.type.query.response.block.merkle;

import com.softwareverde.bitcoin.CoreInflater;
import com.softwareverde.bitcoin.block.BlockInflater;
import com.softwareverde.bitcoin.block.MutableBlock;
import com.softwareverde.bitcoin.block.merkleroot.PartialMerkleTree;
import com.softwareverde.bitcoin.bloomfilter.BloomFilterInflater;
import com.softwareverde.bitcoin.transaction.script.ScriptBuilder;
import com.softwareverde.bitcoin.transaction.script.opcode.Operation;
import com.softwareverde.bitcoin.transaction.script.opcode.PushOperation;
import com.softwareverde.bloomfilter.BloomFilter;
import com.softwareverde.constable.bytearray.MutableByteArray;
import com.softwareverde.constable.list.List;
import com.softwareverde.cryptography.hash.sha256.Sha256Hash;
import com.softwareverde.util.HexUtil;
import com.softwareverde.util.Util;
import org.junit.Assert;
import org.junit.Test;

public class MerkleInflaterTests {
    @Test
    public void should_inflate_merkle_block_from_bitcoinj() {
        final CoreInflater coreInflater = new CoreInflater();
        final String merkleBlockBytesString = "E3E1F3E86D65726B6C65626C6F636B0058010000F9F75FF7" + "0100000006E533FD1ADA86391F3F6C343204B0D278D4AAEC1C0B20AA27BA0300000000006ABBB3EB3D733A9FE18967FD7D4C117E4CCBBAC5BEC4D910D900B3AE0793E77F54241B4D4C86041B4089CC9B0C000000084C30B63CFCDC2D35E3329421B9805EF0C6565D35381CA857762EA0B3A5A128BBCA5065FF9617CBCBA45EB23726DF6498A9B9CAFED4F54CBAB9D227B0035DDEFBBB15AC1D57D0182AAEE61C74743A9C4F785895E563909BAFEC45C9A2B0FF3181D77706BE8B1DCC91112EADA86D424E2D0A8907C3488B6E44FDA5A74A25CBC7D6BB4FA04245F4AC8A1A571D5537EAC24ADCA1454D65EDA446055479AF6C6D4DD3C9AB658448C10B6921B7A4CE3021EB22ED6BB6A7FDE1E5BCC4B1DB6615C6ABC5CA042127BFAF9F44EBCE29CB29C6DF9D05B47F35B2EDFF4F0064B578AB741FA78276222651209FE1A2C4C0FA1C58510AEC8B090DD1EB1F82F9D261B8273B525B02FF1A";
        final MerkleBlockMessageInflater merkleBlockMessageInflater = new MerkleBlockMessageInflater(coreInflater, coreInflater);

        final MerkleBlockMessage inflatedMerkleBlockMessage = merkleBlockMessageInflater.fromBytes(HexUtil.hexStringToByteArray(merkleBlockBytesString));

        final MerkleBlockMessage merkleBlockMessage = new MerkleBlockMessage(coreInflater, coreInflater);
        merkleBlockMessage.setBlockHeader(inflatedMerkleBlockMessage.getBlockHeader());
        merkleBlockMessage.setPartialMerkleTree(inflatedMerkleBlockMessage.getPartialMerkleTree());

        Assert.assertEquals(inflatedMerkleBlockMessage.getPartialMerkleTree().getFlags(), merkleBlockMessage.getPartialMerkleTree().getFlags());
        final PartialMerkleTree inflatedPartialMerkleTree = inflatedMerkleBlockMessage.getPartialMerkleTree();
        final List<Sha256Hash> inflatedPartialMerkleTreeHashes = inflatedPartialMerkleTree.getHashes();

        int i = 0;
        for (final Sha256Hash hash : inflatedPartialMerkleTreeHashes) {
            Assert.assertEquals(hash, merkleBlockMessage.getPartialMerkleTree().getHashes().get(i));
            i += 1;
        }

        Assert.assertEquals(MutableByteArray.wrap(HexUtil.hexStringToByteArray(merkleBlockBytesString)), merkleBlockMessage.getBytes());
    }

    @Test
    public void should_inflate_bitoinj_bloom_filter_and_serve_matched_merkle_block() {
        final BloomFilterInflater bloomFilterInflater = new BloomFilterInflater();
        final BlockInflater blockInflater = new BlockInflater();
        // Block 0000000000000000019A726683D642E8981228E33D79E868E0BE0E4AEA70BCB8
        final MutableBlock block = blockInflater.fromBytes(HexUtil.hexStringToByteArray(""));

        final BloomFilter bloomFilter = bloomFilterInflater.fromBytes(MutableByteArray.wrap(HexUtil.hexStringToByteArray("FD8A02F4106B35AB57512359874F141808577854B6F30A10325FACA7B6B435A2326A695008C670F5E6C484C2955EF99190516434C1744DE30822F55642A00C51F59F948B524D09E2B148E6FFDA219204739DE000A11D20026C8CA248B584A420F77E5B5FBDC858DD0520DF79055704B7FACA299CFDD0F0776BC4A6EFB01FF02D6F44A3D482224D318E43935281C7E8AC00A638B9360F2D6B763B069B1061A72A66C280F413BA34AC425D520839C6B09B4B6FA7BD47803DE82646089B0D49A934961222A25D631CEC6F6D57725695E036B4F912B7E7A494F6865501B9EC3CE02F025B03ED1A2DDC1975C27065A7795A369BFD069E4AFE4A612069599F3D95C15309C73105C889D4C36B83DE802394E5E0D2AAA0DB1180BE0491940F1761A8AB5CA366E2D58EAA7A7F412CEFD158FF308ACB4AE9940A53BD1C8C2A4D6CA162F30F3E9BD9D225334292821400C63D92A4E5E6B4E5280E10613714A5C008496928C6E8404E9C325FA214105E6B57248751B6367052CDD820461B27C4963951C3791FA218F302F35B2EA2BACE39CCCFEBC4C2BCC1908E38892AFC19790430475F5628C07ADF5F03B6D53CD3F14D9B3888736B77166EFC628A66D1C53A0EF881AF9B0F557616A2187AC6A008D2E4A50659861629826119C658B52CF0C0ED81D12769A5737DA892E820E19A9EBFC2C88238B04CE17FC29212B45F1AD269C599A6B1FAFFF1926A00199FE3DFC419D00B06186BC94171B121C2C1572CAB74B01C079479E4880A28FE28E4A5B92AD4ABB306638F68003D0604708A849174E6671423BCD9EC639498B1FEFBE7BC71C0DA9DA04939AC9730299B0C4971779261A5F84922C9A6C6C1EE5A18392D16D03408E1DB5C8800D72ECBAAD93B91152A112BD7C0A16E163A424E0775F91F1513A2EFDC240600000000F8375F02")));
        boolean bloomFilterContainedAddress = false;
        for (final Operation operation : ScriptBuilder.payToAddress("1111111111111111111114oLvT2").getOperations()) {
            if (operation.getType() == Operation.Type.OP_PUSH) {
                bloomFilterContainedAddress |= bloomFilter.containsItem(((PushOperation) operation).getValue());
            }
        }
        Assert.assertTrue(bloomFilterContainedAddress);

        final Sha256Hash transactionHash = Sha256Hash.fromHexString("9563D5F821649BA63AA7D828DD5720D497EDE81610512333CB67C4A8DFC3277E");

        boolean merkleTreeContainedMatchedTransaction = false;
        final PartialMerkleTree partialMerkleTree = block.getPartialMerkleTree(bloomFilter);
        for (final Sha256Hash hash : partialMerkleTree.getHashes()) {
            merkleTreeContainedMatchedTransaction |= Util.areEqual(transactionHash, hash);
        }
        Assert.assertTrue(merkleTreeContainedMatchedTransaction);
    }
}
