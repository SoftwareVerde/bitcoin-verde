package com.softwareverde.bitcoin.server.module.spv;

import com.softwareverde.bitcoin.transaction.Transaction;
import com.softwareverde.bitcoin.transaction.TransactionInflater;
import com.softwareverde.constable.bytearray.ByteArray;
import com.softwareverde.constable.list.List;
import com.softwareverde.cryptography.hash.sha256.Sha256Hash;
import org.junit.Assert;
import org.junit.Test;

import java.util.HashMap;
import java.util.concurrent.atomic.AtomicInteger;

public class SpvTransactionValidatorTests {
    public static class SimpleTransactionAccumulator implements SpvTransactionValidator.TransactionAccumulator {
        protected final HashMap<Sha256Hash, Transaction> _transactions = new HashMap<>();

        @Override
        public void getTransactions(final List<Sha256Hash> previousTransactionHashes, final SpvTransactionValidator.TransactionAccumulatorCallback callback) {
            final HashMap<Sha256Hash, Transaction> transactions = new HashMap<>();
            for (final Sha256Hash transactionHash : previousTransactionHashes) {
                final Transaction previousTransaction = _transactions.get(transactionHash);
                transactions.put(transactionHash, previousTransaction);
            }
            callback.onTransactionsLoaded(transactions);
        }

        void addTransaction(final Transaction transaction) {
            _transactions.put(transaction.getHash(), transaction);
        }
    }

    public static class BlockingValidationCallback implements SpvTransactionValidator.ValidationCallback {
        protected final Object _pin = new Object();

        protected Transaction _transaction;
        protected Boolean _isValid;
        protected final AtomicInteger _completionCalledCount = new AtomicInteger(0);

        @Override
        public void onValidationComplete(final Transaction transaction, final Boolean isValid) {
            _completionCalledCount.incrementAndGet();
            _transaction = transaction;
            _isValid = isValid;

            synchronized (_pin) {
                _pin.notifyAll();
            }
        }

        @Override
        public void onFailure(final Transaction transaction) {
            _completionCalledCount.incrementAndGet();
            _transaction = transaction;

            synchronized (_pin) {
                _pin.notifyAll();
            }
        }

        public void waitForCompletion() {
            synchronized (_pin) {
                if (_transaction != null) { return; }
                try { _pin.wait(5000L); } catch (final Exception exception) { throw new RuntimeException(exception); }
            }
        }

        public Integer getCompletionCount() {
            return _completionCalledCount.get();
        }

        public Boolean isValid() {
            return _isValid;
        }
    }

    @Test
    public void should_validate_non_slp_transaction() {
        // Setup
        final TransactionInflater transactionInflater = new TransactionInflater();

        // Regular BCH Transaction...
        final Transaction transaction = transactionInflater.fromBytes(ByteArray.fromHexString("0200000001F55A14FAD3E33B798A99EA78994905089C816CC40334CA8AA884CF87ADDEC0A0000000006A47304402202F8CF08F40A0D601A8E8E6E93EEC79840766A039556D77983CCF37889D59B37F02204F14AC9DF2E6643F1C637A58EF6EB8806B1D4163B85952F836CFC5B89F4B1A8D412102EA9341606922336B389DEDBD0496C4F8ABBBB5D5B8D4AC5559ADCC74BC79C5B8FFFFFFFF02EE772222000000001976A914E3CE4A0B6AAB655DE9A1AD5701C5CEBB6467680388AC80E2B500000000001976A9142F36DE902FC3EBAD64E59140A323270317DFBDE488AC00000000"));

        final SimpleTransactionAccumulator transactionAccumulator = new SimpleTransactionAccumulator();
        transactionAccumulator.addTransaction(transaction);

        final BlockingValidationCallback validationCallback = new BlockingValidationCallback();

        final SpvTransactionValidator spvTransactionValidator = new SpvTransactionValidator(transactionAccumulator, validationCallback);

        // Action
        spvTransactionValidator.validateTransaction(transaction);
        validationCallback.waitForCompletion();

        // Assert
        Assert.assertTrue(validationCallback.isValid());
        Assert.assertEquals(Integer.valueOf(1), validationCallback.getCompletionCount());
    }

    @Test
    public void should_validate_slp_genesis_transaction() {
        // Setup
        final TransactionInflater transactionInflater = new TransactionInflater();

        // Bitcoin Verde Genesis Token (34DD2FE8F0C5BBA8FC4F280C3815C1E46C2F52404F00DA3067D7CE12962F2ED0)
        final Transaction transaction = transactionInflater.fromBytes(ByteArray.fromHexString

        final SimpleTransactionAccumulator transactionAccumulator = new SimpleTransactionAccumulator();
        transactionAccumulator.addTransaction(transaction);

        final BlockingValidationCallback validationCallback = new BlockingValidationCallback();

        final SpvTransactionValidator spvTransactionValidator = new SpvTransactionValidator(transactionAccumulator, validationCallback);

        // Action
        spvTransactionValidator.validateTransaction(transaction);
        validationCallback.waitForCompletion();

        // Assert
        Assert.assertTrue(validationCallback.isValid());
        Assert.assertEquals(Integer.valueOf(1), validationCallback.getCompletionCount());
    }

    @Test
    public void should_not_validate_invalid_slp_send() {
        // Setup
        final TransactionInflater transactionInflater = new TransactionInflater();

        // Bitcoin Verde Invalid Token Spend (16EA62D94AC142BAF93A6C44C5DC961883DC4D38B85F737ED5B7BB326707C647)
        final Transaction transaction = transactionInflater.fromBytes(ByteArray.fromHexString("0200000001D02E2F9612CED76730DA004F40522F6CE4C115380C284FFCA8BBC5F0E82FDD34010000006B483045022100BB28305E15A28901E129908714E4E40714F368875344DEF14354791C563D3EE90220509498A93BFFBD805D9EAE25E3C74909FD5C92B522620C6833E13EB8307E8D364121029602CA68608F9AB02DC2DA445C97F2D3980F75A5C620742C309BDD8B7E5A5B64FFFFFFFF040000000000000000416A04534C50000101055350454E442034DD2FE8F0C5BBA8FC4F280C3815C1E46C2F52404F00DA3067D7CE12962F2ED0080000000005F5E10008000775F054115F0082020000000000001976A914B3BE4593503F84E2BE61EB33670B31CC7F4FC0AE88AC82020000000000001976A9142297636D6AF0116B6467DCF7C22DC2CAFBC3B3F188AC9E200000000000001976A9145A3DEC87180CC8994907D3B16F1232E8B4EB9E1988AC00000000"));

        final SimpleTransactionAccumulator transactionAccumulator = new SimpleTransactionAccumulator();
        transactionAccumulator.addTransaction(transaction);

        final BlockingValidationCallback validationCallback = new BlockingValidationCallback();

        final SpvTransactionValidator spvTransactionValidator = new SpvTransactionValidator(transactionAccumulator, validationCallback);

        // Action
        spvTransactionValidator.validateTransaction(transaction);
        validationCallback.waitForCompletion();

        // Assert
        Assert.assertFalse(validationCallback.isValid());
        Assert.assertEquals(Integer.valueOf(1), validationCallback.getCompletionCount());
    }

    @Test
    public void should_validate_slp_mint_depth_0() {
        // Setup
        final TransactionInflater transactionInflater = new TransactionInflater();

        // Bitcoin Verde Mint (97BB8FFE6DC71AC5B263F322056069CF398CDA2677E21951364F00D2D572E887)
        final Transaction transaction = transactionInflater.fromBytes(ByteArray.fromHexString

        final SimpleTransactionAccumulator transactionAccumulator = new SimpleTransactionAccumulator();
        transactionAccumulator.addTransaction(transaction);

        final BlockingValidationCallback validationCallback = new BlockingValidationCallback();

        final SpvTransactionValidator spvTransactionValidator = new SpvTransactionValidator(transactionAccumulator, validationCallback);

        // Action
        spvTransactionValidator.validateTransaction(transaction);
        validationCallback.waitForCompletion();

        // Assert
        Assert.assertTrue(validationCallback.isValid());
        Assert.assertEquals(Integer.valueOf(1), validationCallback.getCompletionCount());
    }

    @Test
    public void should_not_validate_slp_mint_of_depth_1_with_missing_previous_transaction() {
        // Setup
        final TransactionInflater transactionInflater = new TransactionInflater();

        // Bitcoin Verde Mint (97BB8FFE6DC71AC5B263F322056069CF398CDA2677E21951364F00D2D572E887)
        final Transaction transaction = transactionInflater.fromBytes(ByteArray.fromHexString("0200000001D02E2F9612CED76730DA004F40522F6CE4C115380C284FFCA8BBC5F0E82FDD34020000006A473044022005EDF960917BCA862C53A60D27A2C0039BF3EC508210B441D3342C953608082602204CD6D425593D1566B2F8620876EC840DBB95881A24EC030064C2221064C863E24121029602CA68608F9AB02DC2DA445C97F2D3980F75A5C620742C309BDD8B7E5A5B64FFFFFFFF040000000000000000396A04534C50000101044D494E542034DD2FE8F0C5BBA8FC4F280C3815C1E46C2F52404F00DA3067D7CE12962F2ED0010208000775F05A07400082020000000000001976A914B3BE4593503F84E2BE61EB33670B31CC7F4FC0AE88AC82020000000000001976A9142297636D6AF0116B6467DCF7C22DC2CAFBC3B3F188ACA6200000000000001976A9145A3DEC87180CC8994907D3B16F1232E8B4EB9E1988AC00000000"));

        final SimpleTransactionAccumulator transactionAccumulator = new SimpleTransactionAccumulator();
        transactionAccumulator.addTransaction(transaction);

        final BlockingValidationCallback validationCallback = new BlockingValidationCallback();

        final SpvTransactionValidator spvTransactionValidator = new SpvTransactionValidator(transactionAccumulator, validationCallback);
        spvTransactionValidator.setMaxRecursionDepth(1);

        // Action
        spvTransactionValidator.validateTransaction(transaction);
        validationCallback.waitForCompletion();

        // Assert
        Assert.assertFalse(validationCallback.isValid());
        Assert.assertEquals(Integer.valueOf(1), validationCallback.getCompletionCount());
    }

    @Test
    public void should_validate_slp_mint_depth_1() {
        // Setup
        final TransactionInflater transactionInflater = new TransactionInflater();

        // Bitcoin Verde Genesis Token (34DD2FE8F0C5BBA8FC4F280C3815C1E46C2F52404F00DA3067D7CE12962F2ED0)
        final Transaction bitcoinVerdeGenesisTransaction = transactionInflater.fromBytes(ByteArray.fromHexString

        // Bitcoin Verde Mint (97BB8FFE6DC71AC5B263F322056069CF398CDA2677E21951364F00D2D572E887)
        final Transaction transaction = transactionInflater.fromBytes(ByteArray.fromHexString

        final SimpleTransactionAccumulator transactionAccumulator = new SimpleTransactionAccumulator();
        transactionAccumulator.addTransaction(bitcoinVerdeGenesisTransaction);
        transactionAccumulator.addTransaction(transaction);

        final BlockingValidationCallback validationCallback = new BlockingValidationCallback();

        final SpvTransactionValidator spvTransactionValidator = new SpvTransactionValidator(transactionAccumulator, validationCallback);
        spvTransactionValidator.setMaxRecursionDepth(1);

        // Action
        spvTransactionValidator.validateTransaction(transaction);
        validationCallback.waitForCompletion();

        // Assert
        Assert.assertTrue(validationCallback.isValid());
        Assert.assertEquals(Integer.valueOf(1), validationCallback.getCompletionCount());
    }

    @Test
    public void should_validate_slp_mint_depth_2() {
        // Setup
        final TransactionInflater transactionInflater = new TransactionInflater();

        // Bitcoin Verde Genesis Token (34DD2FE8F0C5BBA8FC4F280C3815C1E46C2F52404F00DA3067D7CE12962F2ED0)
        final Transaction bitcoinVerdeGenesisTransaction = transactionInflater.fromBytes(ByteArray.fromHexString

        // Bitcoin Verde Mint (97BB8FFE6DC71AC5B263F322056069CF398CDA2677E21951364F00D2D572E887)
        final Transaction bitcoinVerdeMintTransaction = transactionInflater.fromBytes(ByteArray.fromHexString

        // Bitcoin Verde Second Mint (Fake)
        final Transaction secondMintTransaction = transactionInflater.fromBytes(ByteArray.fromHexString("020000000187E872D5D2004F365119E27726DA8C39CF69600522F363B2C51AC76DFE8FBB97030000006B483045022100DFE3EF5A4BDB2ABF1FA1EB516DCD9D0299460EE5033A57923B2F69DB629106BE02200FB022033B98F3B6467019CE50F1D151D25E2B15E071761C45BB6A1A3B1A7E864121038D96DBA2459207CE3E07680AC326A1908763D3C22E1635EFBDEC851DCA52C23CFFFFFFFF040000000000000000396A04534C50000101044D494E542034DD2FE8F0C5BBA8FC4F280C3815C1E46C2F52404F00DA3067D7CE12962F2ED0010208000775F05A07400082020000000000001976A914B3BE4593503F84E2BE61EB33670B31CC7F4FC0AE88AC82020000000000001976A9142297636D6AF0116B6467DCF7C22DC2CAFBC3B3F188AC3C1A0000000000001976A9145A3DEC87180CC8994907D3B16F1232E8B4EB9E1988AC00000000"));

        final SimpleTransactionAccumulator transactionAccumulator = new SimpleTransactionAccumulator();
        transactionAccumulator.addTransaction(bitcoinVerdeGenesisTransaction);
        transactionAccumulator.addTransaction(bitcoinVerdeMintTransaction);

        final BlockingValidationCallback validationCallback = new BlockingValidationCallback();

        final SpvTransactionValidator spvTransactionValidator = new SpvTransactionValidator(transactionAccumulator, validationCallback);
        spvTransactionValidator.setMaxRecursionDepth(2);

        // Action
        spvTransactionValidator.validateTransaction(secondMintTransaction);
        validationCallback.waitForCompletion();

        // Assert
        Assert.assertTrue(validationCallback.isValid());
        Assert.assertEquals(Integer.valueOf(1), validationCallback.getCompletionCount());
    }

    @Test
    public void should_not_validate_slp_send_depth_0() {
        // Setup
        final TransactionInflater transactionInflater = new TransactionInflater();

        // Bitcoin Verde Send (0F58E80BF3E747E32BCF3218D77DC01495622D723589D1F1D1FD98AEFA798D3D)
        final Transaction bitcoinVerdeSend = transactionInflater.fromBytes(ByteArray.fromHexString

        final SimpleTransactionAccumulator transactionAccumulator = new SimpleTransactionAccumulator();
        transactionAccumulator.addTransaction(bitcoinVerdeSend);

        final BlockingValidationCallback validationCallback = new BlockingValidationCallback();

        final SpvTransactionValidator spvTransactionValidator = new SpvTransactionValidator(transactionAccumulator, validationCallback);
        spvTransactionValidator.setMaxRecursionDepth(0);

        // Action
        spvTransactionValidator.validateTransaction(bitcoinVerdeSend);
        validationCallback.waitForCompletion();

        // Assert
        Assert.assertTrue(validationCallback.isValid());
        Assert.assertEquals(Integer.valueOf(1), validationCallback.getCompletionCount());
    }

    @Test
    public void should_not_validate_slp_send_depth_1_with_missing_transaction() {
        // Setup
        final TransactionInflater transactionInflater = new TransactionInflater();

        // Bitcoin Verde Send (0F58E80BF3E747E32BCF3218D77DC01495622D723589D1F1D1FD98AEFA798D3D)
        final Transaction bitcoinVerdeSend = transactionInflater.fromBytes(ByteArray.fromHexString

        final SimpleTransactionAccumulator transactionAccumulator = new SimpleTransactionAccumulator();
        transactionAccumulator.addTransaction(bitcoinVerdeSend);

        final BlockingValidationCallback validationCallback = new BlockingValidationCallback();

        final SpvTransactionValidator spvTransactionValidator = new SpvTransactionValidator(transactionAccumulator, validationCallback);
        spvTransactionValidator.setMaxRecursionDepth(1);

        // Action
        spvTransactionValidator.validateTransaction(bitcoinVerdeSend);
        validationCallback.waitForCompletion();

        // Assert
        Assert.assertFalse(validationCallback.isValid());
        Assert.assertEquals(Integer.valueOf(1), validationCallback.getCompletionCount());
    }

    @Test
    public void should_validate_slp_send_depth_1() {
        // Setup
        final TransactionInflater transactionInflater = new TransactionInflater();

        // Bitcoin Verde Send (68092D36527D174CEA76797B3BB2677F61945FDECA01710976BF840664F7B71A)
        final Transaction previousBitcoinVerdeSend0 = transactionInflater.fromBytes(ByteArray.fromHexString("02000000057353D9BAABDC2B6129B4228F829CD9AA4265038D505785C4B65F1E1467AA7285010000008A47304402204B3C5691676C5B417CF7DD07C83CDE900996DDB1BC7C7B2C0D7DD97161D360D1022041628D687EA100FAC4FB6A30AC677494055481082852CE7867AC3E0AECA8BD414141049602CA68608F9AB02DC2DA445C97F2D3980F75A5C620742C309BDD8B7E5A5B640FD0D5AF4A8168711728B672F2AE0675CFD4E7B67F7EC1E5C6F2EB4BD2E61782FFFFFFFF47C6076732BBB7D57E735FB8384DDC831896DCC5446C3AF9BA42C14AD962EA16010000008A47304402204493D84EE7A8A4187FBA5EC7C793C735CE8272B36617C2B0B6AB42DF0F68816D02202548D647FC9448D547E80E502D7ECFBCC3E4ED385985DC5F065CB8AE6974B7354141049602CA68608F9AB02DC2DA445C97F2D3980F75A5C620742C309BDD8B7E5A5B640FD0D5AF4A8168711728B672F2AE0675CFD4E7B67F7EC1E5C6F2EB4BD2E61782FFFFFFFF47C6076732BBB7D57E735FB8384DDC831896DCC5446C3AF9BA42C14AD962EA16020000006B483045022100CFC87A21C06AA5BAED2C533DBF5DF3A0AA0699616B389DD1069917DBED37990902206A212DA1FDA7E8CA040B1BB64D15F01A8DD1002C7B2CE524100D9C0AA28F2CF74121029602CA68608F9AB02DC2DA445C97F2D3980F75A5C620742C309BDD8B7E5A5B64FFFFFFFF7353D9BAABDC2B6129B4228F829CD9AA4265038D505785C4B65F1E1467AA7285030000006B483045022100D24F214DDA7A7B0E94C522961BE89313D6348E6935FFA31CEFE3BF2F794824E4022023631DCB12F0E9C89DDAB09BD788517542CF8DCE6D8AB1C4EC1569509BEE572B4121038D96DBA2459207CE3E07680AC326A1908763D3C22E1635EFBDEC851DCA52C23CFFFFFFFF47C6076732BBB7D57E735FB8384DDC831896DCC5446C3AF9BA42C14AD962EA16030000006A47304402203C078DB46E37E6601190B6F870F858C293E153AB925D28208D946BF551E90F94022004C37DE8605889CB99E515D7BE581366DDE3691A7E600F0A89E09E170E1CF0654121038D96DBA2459207CE3E07680AC326A1908763D3C22E1635EFBDEC851DCA52C23CFFFFFFFF030000000000000000376A04534C500001010453454E442034DD2FE8F0C5BBA8FC4F280C3815C1E46C2F52404F00DA3067D7CE12962F2ED008000000000000C35010270000000000001976A91468C0E51658F1C0945B58D6225071B03C590107DD88AC05190000000000001976A91487077F24A8AE86E2D76872486D1C820A87BB3EC788AC00000000"));

        // Bitcoin Verde Send (0F58E80BF3E747E32BCF3218D77DC01495622D723589D1F1D1FD98AEFA798D3D)
        final Transaction bitcoinVerdeSend = transactionInflater.fromBytes(ByteArray.fromHexString

        final SimpleTransactionAccumulator transactionAccumulator = new SimpleTransactionAccumulator();
        transactionAccumulator.addTransaction(bitcoinVerdeSend);
        transactionAccumulator.addTransaction(previousBitcoinVerdeSend0);

        final BlockingValidationCallback validationCallback = new BlockingValidationCallback();

        final SpvTransactionValidator spvTransactionValidator = new SpvTransactionValidator(transactionAccumulator, validationCallback);
        spvTransactionValidator.setMaxRecursionDepth(1);

        // Action
        spvTransactionValidator.validateTransaction(bitcoinVerdeSend);
        validationCallback.waitForCompletion();

        // Assert
        Assert.assertTrue(validationCallback.isValid());
        Assert.assertEquals(Integer.valueOf(1), validationCallback.getCompletionCount());
    }

    @Test
    public void should_validate_slp_send_depth_2() {
        // Setup
        final TransactionInflater transactionInflater = new TransactionInflater();

        // Bitcoin Verde Send (8572AA67141E5FB6C48557508D036542AAD99C828F22B429612BDCABBAD95373)
        final Transaction previousBitcoinVerdeSend1 = transactionInflater.fromBytes(ByteArray.fromHexString

        // Bitcoin Verde Send (68092D36527D174CEA76797B3BB2677F61945FDECA01710976BF840664F7B71A)
        final Transaction previousBitcoinVerdeSend0 = transactionInflater.fromBytes(ByteArray.fromHexString("02000000057353D9BAABDC2B6129B4228F829CD9AA4265038D505785C4B65F1E1467AA7285010000008A47304402204B3C5691676C5B417CF7DD07C83CDE900996DDB1BC7C7B2C0D7DD97161D360D1022041628D687EA100FAC4FB6A30AC677494055481082852CE7867AC3E0AECA8BD414141049602CA68608F9AB02DC2DA445C97F2D3980F75A5C620742C309BDD8B7E5A5B640FD0D5AF4A8168711728B672F2AE0675CFD4E7B67F7EC1E5C6F2EB4BD2E61782FFFFFFFF47C6076732BBB7D57E735FB8384DDC831896DCC5446C3AF9BA42C14AD962EA16010000008A47304402204493D84EE7A8A4187FBA5EC7C793C735CE8272B36617C2B0B6AB42DF0F68816D02202548D647FC9448D547E80E502D7ECFBCC3E4ED385985DC5F065CB8AE6974B7354141049602CA68608F9AB02DC2DA445C97F2D3980F75A5C620742C309BDD8B7E5A5B640FD0D5AF4A8168711728B672F2AE0675CFD4E7B67F7EC1E5C6F2EB4BD2E61782FFFFFFFF47C6076732BBB7D57E735FB8384DDC831896DCC5446C3AF9BA42C14AD962EA16020000006B483045022100CFC87A21C06AA5BAED2C533DBF5DF3A0AA0699616B389DD1069917DBED37990902206A212DA1FDA7E8CA040B1BB64D15F01A8DD1002C7B2CE524100D9C0AA28F2CF74121029602CA68608F9AB02DC2DA445C97F2D3980F75A5C620742C309BDD8B7E5A5B64FFFFFFFF7353D9BAABDC2B6129B4228F829CD9AA4265038D505785C4B65F1E1467AA7285030000006B483045022100D24F214DDA7A7B0E94C522961BE89313D6348E6935FFA31CEFE3BF2F794824E4022023631DCB12F0E9C89DDAB09BD788517542CF8DCE6D8AB1C4EC1569509BEE572B4121038D96DBA2459207CE3E07680AC326A1908763D3C22E1635EFBDEC851DCA52C23CFFFFFFFF47C6076732BBB7D57E735FB8384DDC831896DCC5446C3AF9BA42C14AD962EA16030000006A47304402203C078DB46E37E6601190B6F870F858C293E153AB925D28208D946BF551E90F94022004C37DE8605889CB99E515D7BE581366DDE3691A7E600F0A89E09E170E1CF0654121038D96DBA2459207CE3E07680AC326A1908763D3C22E1635EFBDEC851DCA52C23CFFFFFFFF030000000000000000376A04534C500001010453454E442034DD2FE8F0C5BBA8FC4F280C3815C1E46C2F52404F00DA3067D7CE12962F2ED008000000000000C35010270000000000001976A91468C0E51658F1C0945B58D6225071B03C590107DD88AC05190000000000001976A91487077F24A8AE86E2D76872486D1C820A87BB3EC788AC00000000"));

        // Bitcoin Verde Send (0F58E80BF3E747E32BCF3218D77DC01495622D723589D1F1D1FD98AEFA798D3D)
        final Transaction bitcoinVerdeSend = transactionInflater.fromBytes(ByteArray.fromHexString

        final SimpleTransactionAccumulator transactionAccumulator = new SimpleTransactionAccumulator();
        transactionAccumulator.addTransaction(bitcoinVerdeSend);
        transactionAccumulator.addTransaction(previousBitcoinVerdeSend0);
        transactionAccumulator.addTransaction(previousBitcoinVerdeSend1);

        final BlockingValidationCallback validationCallback = new BlockingValidationCallback();

        final SpvTransactionValidator spvTransactionValidator = new SpvTransactionValidator(transactionAccumulator, validationCallback);
        spvTransactionValidator.setMaxRecursionDepth(2);

        // Action
        spvTransactionValidator.validateTransaction(bitcoinVerdeSend);
        validationCallback.waitForCompletion();

        // Assert
        Assert.assertTrue(validationCallback.isValid());
        Assert.assertEquals(Integer.valueOf(1), validationCallback.getCompletionCount());
    }

    @Test
    public void should_validate_slp_send_depth_3() {
        // Setup
        final TransactionInflater transactionInflater = new TransactionInflater();

        // Bitcoin Verde Send (97BB8FFE6DC71AC5B263F322056069CF398CDA2677E21951364F00D2D572E887)
        final Transaction previousBitcoinVerdeSend2 = transactionInflater.fromBytes(ByteArray.fromHexString("0200000001D02E2F9612CED76730DA004F40522F6CE4C115380C284FFCA8BBC5F0E82FDD34020000006A473044022005EDF960917BCA862C53A60D27A2C0039BF3EC508210B441D3342C953608082602204CD6D425593D1566B2F8620876EC840DBB95881A24EC030064C2221064C863E24121029602CA68608F9AB02DC2DA445C97F2D3980F75A5C620742C309BDD8B7E5A5B64FFFFFFFF040000000000000000396A04534C50000101044D494E542034DD2FE8F0C5BBA8FC4F280C3815C1E46C2F52404F00DA3067D7CE12962F2ED0010208000775F05A07400082020000000000001976A914B3BE4593503F84E2BE61EB33670B31CC7F4FC0AE88AC82020000000000001976A9142297636D6AF0116B6467DCF7C22DC2CAFBC3B3F188ACA6200000000000001976A9145A3DEC87180CC8994907D3B16F1232E8B4EB9E1988AC00000000"));

        // Bitcoin Verde Send (8572AA67141E5FB6C48557508D036542AAD99C828F22B429612BDCABBAD95373)
        final Transaction previousBitcoinVerdeSend1 = transactionInflater.fromBytes(ByteArray.fromHexString

        // Bitcoin Verde Send (68092D36527D174CEA76797B3BB2677F61945FDECA01710976BF840664F7B71A)
        final Transaction previousBitcoinVerdeSend0 = transactionInflater.fromBytes(ByteArray.fromHexString("02000000057353D9BAABDC2B6129B4228F829CD9AA4265038D505785C4B65F1E1467AA7285010000008A47304402204B3C5691676C5B417CF7DD07C83CDE900996DDB1BC7C7B2C0D7DD97161D360D1022041628D687EA100FAC4FB6A30AC677494055481082852CE7867AC3E0AECA8BD414141049602CA68608F9AB02DC2DA445C97F2D3980F75A5C620742C309BDD8B7E5A5B640FD0D5AF4A8168711728B672F2AE0675CFD4E7B67F7EC1E5C6F2EB4BD2E61782FFFFFFFF47C6076732BBB7D57E735FB8384DDC831896DCC5446C3AF9BA42C14AD962EA16010000008A47304402204493D84EE7A8A4187FBA5EC7C793C735CE8272B36617C2B0B6AB42DF0F68816D02202548D647FC9448D547E80E502D7ECFBCC3E4ED385985DC5F065CB8AE6974B7354141049602CA68608F9AB02DC2DA445C97F2D3980F75A5C620742C309BDD8B7E5A5B640FD0D5AF4A8168711728B672F2AE0675CFD4E7B67F7EC1E5C6F2EB4BD2E61782FFFFFFFF47C6076732BBB7D57E735FB8384DDC831896DCC5446C3AF9BA42C14AD962EA16020000006B483045022100CFC87A21C06AA5BAED2C533DBF5DF3A0AA0699616B389DD1069917DBED37990902206A212DA1FDA7E8CA040B1BB64D15F01A8DD1002C7B2CE524100D9C0AA28F2CF74121029602CA68608F9AB02DC2DA445C97F2D3980F75A5C620742C309BDD8B7E5A5B64FFFFFFFF7353D9BAABDC2B6129B4228F829CD9AA4265038D505785C4B65F1E1467AA7285030000006B483045022100D24F214DDA7A7B0E94C522961BE89313D6348E6935FFA31CEFE3BF2F794824E4022023631DCB12F0E9C89DDAB09BD788517542CF8DCE6D8AB1C4EC1569509BEE572B4121038D96DBA2459207CE3E07680AC326A1908763D3C22E1635EFBDEC851DCA52C23CFFFFFFFF47C6076732BBB7D57E735FB8384DDC831896DCC5446C3AF9BA42C14AD962EA16030000006A47304402203C078DB46E37E6601190B6F870F858C293E153AB925D28208D946BF551E90F94022004C37DE8605889CB99E515D7BE581366DDE3691A7E600F0A89E09E170E1CF0654121038D96DBA2459207CE3E07680AC326A1908763D3C22E1635EFBDEC851DCA52C23CFFFFFFFF030000000000000000376A04534C500001010453454E442034DD2FE8F0C5BBA8FC4F280C3815C1E46C2F52404F00DA3067D7CE12962F2ED008000000000000C35010270000000000001976A91468C0E51658F1C0945B58D6225071B03C590107DD88AC05190000000000001976A91487077F24A8AE86E2D76872486D1C820A87BB3EC788AC00000000"));

        // Bitcoin Verde Send (0F58E80BF3E747E32BCF3218D77DC01495622D723589D1F1D1FD98AEFA798D3D)
        final Transaction bitcoinVerdeSend = transactionInflater.fromBytes(ByteArray.fromHexString("02000000011AB7F7640684BF76097101CADE5F94617F67B23B7B7976EA4C177D52362D0968010000008A4730440220338FC724CEA49B7349036370C5998278B4CCA078C4065D1B23A206E2B2714CD002206BA0A72EE7CE3111102813A1D1BD7DC9C24923149E11D6D9F53ECF812C7058464141049AEABFB7D24D3360C965EC4C0732357657EE4183660BB0BC050C0DE22086F53CA3ED6C23F4FD932083C073F3E0271178CC7999DFF73BB36F732595785B1055FAFFFFFFFF030000000000000000406A04534C500001010453454E442034DD2FE8F0C5BBA8FC4F280C3815C1E46C2F52404F00DA3067D7CE12962F2ED0080000000000001E6108000000000000A4EF611E0000000000001976A914056B3F4EADA24CBE80F27E4A6B4BECD58BA6D91888AC42070000000000001976A91487077F24A8AE86E2D76872486D1C820A87BB3EC788AC00000000"));

        final SimpleTransactionAccumulator transactionAccumulator = new SimpleTransactionAccumulator();
        transactionAccumulator.addTransaction(bitcoinVerdeSend);
        transactionAccumulator.addTransaction(previousBitcoinVerdeSend0);
        transactionAccumulator.addTransaction(previousBitcoinVerdeSend1);
        transactionAccumulator.addTransaction(previousBitcoinVerdeSend2);

        final BlockingValidationCallback validationCallback = new BlockingValidationCallback();

        final SpvTransactionValidator spvTransactionValidator = new SpvTransactionValidator(transactionAccumulator, validationCallback);
        spvTransactionValidator.setMaxRecursionDepth(3);

        // Action
        spvTransactionValidator.validateTransaction(bitcoinVerdeSend);
        validationCallback.waitForCompletion();

        // Assert
        Assert.assertTrue(validationCallback.isValid());
        Assert.assertEquals(Integer.valueOf(1), validationCallback.getCompletionCount());
    }

    @Test
    public void should_validate_slp_send_depth_4() {
        // Setup
        final TransactionInflater transactionInflater = new TransactionInflater();

        // Bitcoin Verde Genesis (34DD2FE8F0C5BBA8FC4F280C3815C1E46C2F52404F00DA3067D7CE12962F2ED0)
        final Transaction previousBitcoinVerdeSend3 = transactionInflater.fromBytes(ByteArray.fromHexString("0200000002AF49D1D6A11214D3F36283D39DBAF2D6D597022D9CFEEC2ECDA9C056976A8860010000008A47304402200F78E36957818613EAAC9D2AEC24ED241BE073369342DB459F531363F3D634D6022068142982090BDAD9D7F58B746B0302073DCDC2D0888B7718D16957FAA7B52CB24141048D96DBA2459207CE3E07680AC326A1908763D3C22E1635EFBDEC851DCA52C23CB4AA21A1EE9AC97B53769935A2C33D10006768813C6039F38BBBA0DA3BB10CE9FFFFFFFFAF49D1D6A11214D3F36283D39DBAF2D6D597022D9CFEEC2ECDA9C056976A886000000000694630430220221DEECB0DA419DB079C2EA2A5B3859BCEBD92B41DC073467E22C0B03A914C16021F4EBB42FC2E719185BBDD6D9583A14D492882FD7A3784921DA9C780D5E535F04121029AEABFB7D24D3360C965EC4C0732357657EE4183660BB0BC050C0DE22086F53CFFFFFFFF0400000000000000004F6A04534C500001010747454E455349530342565412426974636F696E20566572646520546573741868747470733A2F2F626974636F696E76657264652E6F72674C000108010208000775F05A07400010270000000000001976A9142297636D6AF0116B6467DCF7C22DC2CAFBC3B3F188AC10270000000000001976A9142297636D6AF0116B6467DCF7C22DC2CAFBC3B3F188AC2A230000000000001976A9145A3DEC87180CC8994907D3B16F1232E8B4EB9E1988AC00000000"));

        // Bitcoin Verde Mint (97BB8FFE6DC71AC5B263F322056069CF398CDA2677E21951364F00D2D572E887)
        final Transaction previousBitcoinVerdeSend2 = transactionInflater.fromBytes(ByteArray.fromHexString

        // Bitcoin Verde Send (8572AA67141E5FB6C48557508D036542AAD99C828F22B429612BDCABBAD95373)
        final Transaction previousBitcoinVerdeSend1 = transactionInflater.fromBytes(ByteArray.fromHexString

        // Bitcoin Verde Send (68092D36527D174CEA76797B3BB2677F61945FDECA01710976BF840664F7B71A)
        final Transaction previousBitcoinVerdeSend0 = transactionInflater.fromBytes(ByteArray.fromHexString("02000000057353D9BAABDC2B6129B4228F829CD9AA4265038D505785C4B65F1E1467AA7285010000008A47304402204B3C5691676C5B417CF7DD07C83CDE900996DDB1BC7C7B2C0D7DD97161D360D1022041628D687EA100FAC4FB6A30AC677494055481082852CE7867AC3E0AECA8BD414141049602CA68608F9AB02DC2DA445C97F2D3980F75A5C620742C309BDD8B7E5A5B640FD0D5AF4A8168711728B672F2AE0675CFD4E7B67F7EC1E5C6F2EB4BD2E61782FFFFFFFF47C6076732BBB7D57E735FB8384DDC831896DCC5446C3AF9BA42C14AD962EA16010000008A47304402204493D84EE7A8A4187FBA5EC7C793C735CE8272B36617C2B0B6AB42DF0F68816D02202548D647FC9448D547E80E502D7ECFBCC3E4ED385985DC5F065CB8AE6974B7354141049602CA68608F9AB02DC2DA445C97F2D3980F75A5C620742C309BDD8B7E5A5B640FD0D5AF4A8168711728B672F2AE0675CFD4E7B67F7EC1E5C6F2EB4BD2E61782FFFFFFFF47C6076732BBB7D57E735FB8384DDC831896DCC5446C3AF9BA42C14AD962EA16020000006B483045022100CFC87A21C06AA5BAED2C533DBF5DF3A0AA0699616B389DD1069917DBED37990902206A212DA1FDA7E8CA040B1BB64D15F01A8DD1002C7B2CE524100D9C0AA28F2CF74121029602CA68608F9AB02DC2DA445C97F2D3980F75A5C620742C309BDD8B7E5A5B64FFFFFFFF7353D9BAABDC2B6129B4228F829CD9AA4265038D505785C4B65F1E1467AA7285030000006B483045022100D24F214DDA7A7B0E94C522961BE89313D6348E6935FFA31CEFE3BF2F794824E4022023631DCB12F0E9C89DDAB09BD788517542CF8DCE6D8AB1C4EC1569509BEE572B4121038D96DBA2459207CE3E07680AC326A1908763D3C22E1635EFBDEC851DCA52C23CFFFFFFFF47C6076732BBB7D57E735FB8384DDC831896DCC5446C3AF9BA42C14AD962EA16030000006A47304402203C078DB46E37E6601190B6F870F858C293E153AB925D28208D946BF551E90F94022004C37DE8605889CB99E515D7BE581366DDE3691A7E600F0A89E09E170E1CF0654121038D96DBA2459207CE3E07680AC326A1908763D3C22E1635EFBDEC851DCA52C23CFFFFFFFF030000000000000000376A04534C500001010453454E442034DD2FE8F0C5BBA8FC4F280C3815C1E46C2F52404F00DA3067D7CE12962F2ED008000000000000C35010270000000000001976A91468C0E51658F1C0945B58D6225071B03C590107DD88AC05190000000000001976A91487077F24A8AE86E2D76872486D1C820A87BB3EC788AC00000000"));

        // Bitcoin Verde Send (0F58E80BF3E747E32BCF3218D77DC01495622D723589D1F1D1FD98AEFA798D3D)
        final Transaction bitcoinVerdeSend = transactionInflater.fromBytes(ByteArray.fromHexString

        final SimpleTransactionAccumulator transactionAccumulator = new SimpleTransactionAccumulator();
        transactionAccumulator.addTransaction(bitcoinVerdeSend);
        transactionAccumulator.addTransaction(previousBitcoinVerdeSend0);
        transactionAccumulator.addTransaction(previousBitcoinVerdeSend1);
        transactionAccumulator.addTransaction(previousBitcoinVerdeSend2);
        transactionAccumulator.addTransaction(previousBitcoinVerdeSend3);

        final BlockingValidationCallback validationCallback = new BlockingValidationCallback();

        final SpvTransactionValidator spvTransactionValidator = new SpvTransactionValidator(transactionAccumulator, validationCallback);
        spvTransactionValidator.setMaxRecursionDepth(4);

        // Action
        spvTransactionValidator.validateTransaction(bitcoinVerdeSend);
        validationCallback.waitForCompletion();

        // Assert
        Assert.assertTrue(validationCallback.isValid());
        Assert.assertEquals(Integer.valueOf(1), validationCallback.getCompletionCount());
    }
}
