package com.softwareverde.bitcoin.wallet;

import com.softwareverde.bitcoin.CoreInflater;
import com.softwareverde.bitcoin.bip.CoreUpgradeSchedule;
import com.softwareverde.bitcoin.bip.UpgradeSchedule;
import com.softwareverde.bitcoin.chain.time.ImmutableMedianBlockTime;
import com.softwareverde.bitcoin.context.MedianBlockTimeContext;
import com.softwareverde.bitcoin.context.core.TransactionValidatorContext;
import com.softwareverde.bitcoin.inflater.MasterInflater;
import com.softwareverde.bitcoin.test.UnitTest;
import com.softwareverde.bitcoin.test.fake.FakeStaticMedianBlockTimeContext;
import com.softwareverde.bitcoin.test.fake.FakeUnspentTransactionOutputContext;
import com.softwareverde.bitcoin.transaction.Transaction;
import com.softwareverde.bitcoin.transaction.TransactionInflater;
import com.softwareverde.bitcoin.transaction.validator.TransactionValidationResult;
import com.softwareverde.bitcoin.transaction.validator.TransactionValidator;
import com.softwareverde.bitcoin.transaction.validator.TransactionValidatorCore;
import com.softwareverde.constable.bytearray.ByteArray;
import com.softwareverde.network.time.MutableNetworkTime;
import com.softwareverde.util.HexUtil;
import org.junit.After;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

public class IntegratedWalletTests extends UnitTest {
    @Override @Before
    public void before() throws Exception {
        super.before();
    }

    @Override @After
    public void after() throws Exception {
        super.after();
    }

    @Test
    public void should_validate_tx_created_by_app() throws Exception {
        final String[] transactionHexStrings = new String[] {
            "0100000001CC6C5600A0927CD5395CD12B0D665A3715EDA91EA3E968ABE729AB8A11D7839D000000006B483045022100E5C9AF0D647DD90251BE09BEE5B79F0F2756C55E00C6C94545656C91321C95FA02205224BF9265400E706FE1422A755FBD243062A15F2C953BBAFE7C2D978222C50D4121029602CA68608F9AB02DC2DA445C97F2D3980F75A5C620742C309BDD8B7E5A5B64FFFFFFFF0139B20C00000000001976A914B3BE4593503F84E2BE61EB33670B31CC7F4FC0AE88AC00000000",
            "010000000186545EEFE698D40FA669CB368AFDA14925A67DF0423B546133F5172882A1D25B000000008A473044022015EAE18F490FDB0C5780A655F87D6DA0EC57052A89E0461610D7262F69FFA6CC0220777A405C3552006D2BF41880F337AB01EDBB1D5BED0192ADB10B236920F9CC534141049602CA68608F9AB02DC2DA445C97F2D3980F75A5C620742C309BDD8B7E5A5B640FD0D5AF4A8168711728B672F2AE0675CFD4E7B67F7EC1E5C6F2EB4BD2E61782FFFFFFFF01FAB20C00000000001976A9142297636D6AF0116B6467DCF7C22DC2CAFBC3B3F188AC00000000",
            "010000000139BF05EAFF9C50853202AE70FE9D9630A1E05044C360103C3032DE7E95A3EC03000000008A47304402207151C04081E5C176659C2703C01D9B686D6EF5BAA251D1B4A2B4CD201526AFA30220356FE788113684C68BB7F87D19701287CF5B090AF4352D44075904E967856F584141040802CA060816C5596860EEB2C3237DBABFFC5A5EBD58F1B6EB48CE08E213DBA7069B638863C81EFF15FCE23183AD337D12E4D29A794652FC74436CDC09E92C17FFFFFFFF01A8AF0C00000000001976A914DCD60868FEF4F954146D2D38F7E29C12D4E0285788AC00000000",
            "01000000013B31924ADC40766F169B0DF4FFE5A5EED9A11A9694CDEFDE222E5B7D20DC1D83000000008A473044022055DFD8DC5123F8F5959905226B9C6124698D2547CD2984D64EB922B05EAEACC9022049C5C6CAD4B685943845369CB77076D5DF7E08C783CA438D0F50F3DF2AABA5194141043D2ECBDF951A12A565980884706C8ABC092954E8C9C36ECC9B3C9B6E9AAD6E3D9D01AAF3A19CFACB49B3496EC560BE39139A50693A7A30AFAFC6AC8C2EFD392DFFFFFFFF03A0860100000000001976A914CB7A79C58B7B69516F26FA1AF43B2F9F26D7378588ACA0860100000000001976A914D0577979B31D9BE29AE8B6298D6839184E09BD6588ACD8A00900000000001976A914DCD60868FEF4F954146D2D38F7E29C12D4E0285788AC00000000",
            "0100000001F34C4B822648CE8F242E063AC22F35B6D67243D6EB6B467DF9A4533F095364F1020000008B483045022100B76E2829432658057797EEF540717611CE1633CCF88BA28B254584F422F631CC0220326D199AFC20CC108DD027D0FBD987BE4E63468EE552162C9077EA06A0C1F3AE4141043D2ECBDF951A12A565980884706C8ABC092954E8C9C36ECC9B3C9B6E9AAD6E3D9D01AAF3A19CFACB49B3496EC560BE39139A50693A7A30AFAFC6AC8C2EFD392DFFFFFFFF0350C30000000000001976A914CB7A79C58B7B69516F26FA1AF43B2F9F26D7378588AC50C30000000000001976A914D0577979B31D9BE29AE8B6298D6839184E09BD6588ACA8180800000000001976A914DCD60868FEF4F954146D2D38F7E29C12D4E0285788AC00000000",
            "0100000001323DC2EB4B9470AB06089D42D0D15A92058D5BBADCE522F6FDA876DC3E123E8F000000008A47304402201DB0B2E61D96CFEAE1389FA9D02DEA9714D99D1DDF555119A45520A15F207126022016A053E632513F648E3DECE56FAC26060BBC62E13925800786B64E4D93BE2AF54141049602CA68608F9AB02DC2DA445C97F2D3980F75A5C620742C309BDD8B7E5A5B640FD0D5AF4A8168711728B672F2AE0675CFD4E7B67F7EC1E5C6F2EB4BD2E61782FFFFFFFF01D4B00C00000000001976A91487077F24A8AE86E2D76872486D1C820A87BB3EC788AC00000000",
            "0100000003E0CE648224790784CA3136697862965B328092D99231F16B3B37C2CED9790A72000000006A473044022025BFEFE18B5385F889962B7465A3FA6DE183CF67CA22169BBBFF2CB2C288C19D02202764BA6CACC89DC4CEEFBBBD272110C1C5179C1D41DB9E048BD48C4EF692AB1F4121025D45A8DB44EA091C7B34F85FBC81CB3B31DC8365DA7BAE1DF4D033FA4A32E57DFFFFFFFFE0847E09B594ADD7FEBBCCBDBB8DBA51DD6449116C1BF5191403240BA3847A51000000006A473044022006BF7D2A7B1399AA96D488669F7D0A7B4F5269AAE8142A4FE7E6CCDBE340A260022007E430C3D30DDB8B6F14A2998A1F538242BDDE5B6238B2054878BFD04006CF134121025D45A8DB44EA091C7B34F85FBC81CB3B31DC8365DA7BAE1DF4D033FA4A32E57DFFFFFFFFDCF0B7DF209ACDE230CDBC451E0B49993A1A9D8715E023B8C86067597E8138AD000000006A47304402206315FAA8226AAF027735AE5A921B55E480A92B64D68477FBDBF977369BC038B002203877B445BD644A51FD2EA7BE713F43DACF4B72F6564538CFFE42D35AD257BF014121025D45A8DB44EA091C7B34F85FBC81CB3B31DC8365DA7BAE1DF4D033FA4A32E57DFFFFFFFF01F4B30C00000000001976A914B3BE4593503F84E2BE61EB33670B31CC7F4FC0AE88AC00000000",
            "02000000012E4E6662FDBF5E217A0A6AD926A9C541BF803E01E15857603AC5613B453A5D46010000006B483045022100FC9686E99039349E46E479504410117A5A0C1C1235ED64A55441ED23C93D9E9902200E45E02FA80A3D07A02EFC1C386ADC1269D5E7918FA2F6DBA1BD9DD16F997C83412103321904FC0848CFC66C5ABD2BAE4E5A0E591DD30CB04997DED751FF11A1C85E4BFFFFFFFF02565ED822000000001976A914A119E66C47CDA43EB1EE0EE3EB0349BCF408843888AC68420000000000001976A91487077F24A8AE86E2D76872486D1C820A87BB3EC788AC00000000",
            "0200000001B407DD18E98019D7711AB87A51F340B4B8570390651E86F7F15111E04B4C41BA860000006A47304402204AEA02984644FE5E0333709E7089C95A5BDC0C8DF77DD03B04F72139B60573F202203E935E7A835E2D0ED1C42EC215E3B389CE6535B10CB80BAA3F60672C8569484E412103AAAC352016376B9BE4ECA4D303BCEBAD9F773872E7A1584E0A3DCF259BBAADF7FFFFFFFF02F5D61A00000000001976A914AEAFC2F4A4026827BB66F1EA3C475ECAB670D28C88AC68420000000000001976A9142297636D6AF0116B6467DCF7C22DC2CAFBC3B3F188AC00000000"
        };

        final FakeUnspentTransactionOutputContext unspentTransactionOutputContext = new FakeUnspentTransactionOutputContext();

        final MasterInflater masterInflater = new CoreInflater();
        final UpgradeSchedule upgradeSchedule = new CoreUpgradeSchedule();
        final TransactionInflater transactionInflater = masterInflater.getTransactionInflater();
        for (final String transactionString : transactionHexStrings) {
            final Transaction transaction = transactionInflater.fromBytes(HexUtil.hexStringToByteArray(transactionString));
            unspentTransactionOutputContext.addTransaction(transaction, null, null, false);
        }

        final ByteArray transactionBytes = ByteArray.fromHexString("0200000002F55A14FAD3E33B798A99EA78994905089C816CC40334CA8AA884CF87ADDEC0A0010000008B4830450221008CE5C85400EE7874AFC774676037DCDFE87BA2206F1E65E6D09B55E4A76D9DAF02204896A623C37A36D21C83AF6FEC60954F2A7A0E05B4E64A3A8AC564C97047FDCE4141040802CA060816C5596860EEB2C3237DBABFFC5A5EBD58F1B6EB48CE08E213DBA7069B638863C81EFF15FCE23183AD337D12E4D29A794652FC74436CDC09E92C17FFFFFFFFBA9424ACD93EA5BCC22383EAD06AE88908C44A98F769237BBAA0616A1D70E2A0010000006A47304402205FEF4DB272809711CA1549849688E048628229E5FD6DA4967A4E1890D1E34F000220525B57268FC76B58345C207331B9824093590D61BE59E1FA8C41B4B64FC6BA324121029602CA68608F9AB02DC2DA445C97F2D3980F75A5C620742C309BDD8B7E5A5B64FFFFFFFF02606D0000000000001976A914B3BE4593503F84E2BE61EB33670B31CC7F4FC0AE88AC7C140000000000001976A91455CE63AE0472184AE53B26BB117D6843C667BA3388AC00000000");
        final Transaction transaction = transactionInflater.fromBytes(transactionBytes);

        final MedianBlockTimeContext medianBlockTimeContext = new FakeStaticMedianBlockTimeContext(ImmutableMedianBlockTime.fromSeconds(1557325160L));
        final TransactionValidatorContext transactionValidatorContext = new TransactionValidatorContext(masterInflater, new MutableNetworkTime(), medianBlockTimeContext, unspentTransactionOutputContext, upgradeSchedule);
        final TransactionValidator transactionValidator = new TransactionValidatorCore(transactionValidatorContext);

        final TransactionValidationResult transactionValidationResult = transactionValidator.validateTransaction(581678L, transaction);
        Assert.assertTrue(transactionValidationResult.isValid);
    }
}
